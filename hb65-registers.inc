.IFNDEF _INCLUDE_REGISTERS_
_INCLUDE_REGISTERS_ = 1

.INCLUDE    "hb65-config.inc"

; Register space constants
  REGISTERS_START := $80
 SYSDEF_REGISTERS := REGISTERS_START + $00
  PDEV0_REGISTERS := REGISTERS_START + $10
  PDEV1_REGISTERS := REGISTERS_START + $20
  PDEV2_REGISTERS := REGISTERS_START + $30
  PDEV3_REGISTERS := REGISTERS_START + $40
  RDEV0_REGISTERS := REGISTERS_START + $50
  RDEV1_REGISTERS := REGISTERS_START + $60
DECODER_REGISTERS := REGISTERS_START + $70

; DEFINE_REGISTERS macro
; Defines the specified label and sets its value to the start of the specified
; device's register space, based on the device assignments in hb65-config.inc.
; If the device is not present in the system configuration, the label is not defined.
.MACRO DEFINE_REGISTERS label, device
  .IFDEF device
    .IF device = DEVICE_LOCATIONS::RDEV0
      label := RDEV0_REGISTERS
    .ELSEIF device = DEVICE_LOCATIONS::RDEV1
      label := RDEV1_REGISTERS
    .ELSEIF device = DEVICE_LOCATIONS::PDEV0
      label := PDEV0_REGISTERS
    .ELSEIF device = DEVICE_LOCATIONS::PDEV1
      label := PDEV1_REGISTERS
    .ELSEIF device = DEVICE_LOCATIONS::PDEV2
      label := PDEV2_REGISTERS
    .ELSEIF device = DEVICE_LOCATIONS::PDEV3
      label := PDEV3_REGISTERS
    .ENDIF
  .ENDIF
.ENDMACRO

; Address decoder
DECODER_DCR  := DECODER_REGISTERS + $00
.ENUM DECODER_DCR_BIT
  NMIEN     = 7
  IRQEN     = 6
  WRAM512K  = 5
  BUZZ      = 0
.ENDENUM

DECODER_SFR  := DECODER_REGISTERS + $01
.ENUM DECODER_SFR_BIT
   SFWM1    = 5
   SFWM0    = 4
   ALTFN    = 1
  SYSCTX    = 0
.ENDENUM

DECODER_MLR  := DECODER_REGISTERS + $02
.ENUM DECODER_MLR_BIT
  SROMPR    = 4
  PDEV3MEN  = 3
  PDEV2MEN  = 2
  PDEV1MEN  = 1
  PDEV0MEN  = 0
.ENDENUM

DECODER_RLR  := DECODER_REGISTERS + $03
.ENUM DECODER_RLR_BIT
  RDEV1REN  = 6
  RDEV0REN  = 5
  PDEV3REN  = 4
  PDEV2REN  = 3
  PDEV1REN  = 2
  PDEV0REN  = 1
  SDEFREN   = 0
.ENDENUM

DECODER_WBR  := DECODER_REGISTERS + $04
.ENUM DECODER_WBR_BIT
  WRBANK3   = 3
  WRBANK2   = 2
  WRBANK1   = 1
  WRBANK0   = 0
.ENDENUM

DECODER_SR0   := DECODER_REGISTERS + $08            ; Scratch Register 0 (8-bit)
DECODER_SR1   := DECODER_REGISTERS + $09            ; Scratch Register 1 (8-bit)
DECODER_SR2   := DECODER_REGISTERS + $0A            ; Scratch Register 2 (8-bit)
DECODER_SR3   := DECODER_REGISTERS + $0B            ; Scratch Register 3 (8-bit)
DECODER_SR4   := DECODER_REGISTERS + $0C            ; Scratch Register 4 (8-bit)
DECODER_SR5   := DECODER_REGISTERS + $0D            ; Scratch Register 5 (8-bit)
DECODER_SR6   := DECODER_REGISTERS + $0E            ; Scratch Register 6 (8-bit)
DECODER_SR7   := DECODER_REGISTERS + $0F            ; Scratch Register 7 (8-bit)

DECODER_SRA   := DECODER_SR0                        ; Scratch Register A (16-bit)
DECODER_SRAL  := DECODER_SR0
DECODER_SRAH  := DECODER_SR1 

DECODER_SRB   := DECODER_SR2                        ; Scratch Register B (16-bit)
DECODER_SRBL  := DECODER_SR2
DECODER_SRBH  := DECODER_SR3 

DECODER_SRC   := DECODER_SR4                        ; Scratch Register C (16-bit)
DECODER_SRCL  := DECODER_SR4
DECODER_SRCH  := DECODER_SR5 

DECODER_SRD   := DECODER_SR6                        ; Scratch Register D (16-bit)
DECODER_SRDL  := DECODER_SR6
DECODER_SRDH  := DECODER_SR7 

; System, Type A
.IF CFG_SYS_CARD = SYSTEM_CARDS::TYPE_A
SYSTEM_VIA_REGISTERS := SYSDEF_REGISTERS
SYSTEM_VIA_ORB       := SYSTEM_VIA_REGISTERS + $00   ; ORB
SYSTEM_VIA_IRB       := SYSTEM_VIA_ORB               ; IRB
SYSTEM_VIA_ORA       := SYSTEM_VIA_REGISTERS + $01   ; ORA
SYSTEM_VIA_IRA       := SYSTEM_VIA_ORA               ; IRA
SYSTEM_VIA_DDRB      := SYSTEM_VIA_REGISTERS + $02   ; DDRB
SYSTEM_VIA_DDRA      := SYSTEM_VIA_REGISTERS + $03   ; DDRA
SYSTEM_VIA_T1CL      := SYSTEM_VIA_REGISTERS + $04   ; T1CL
SYSTEM_VIA_T1CH      := SYSTEM_VIA_REGISTERS + $05   ; T1CH
SYSTEM_VIA_T1LL      := SYSTEM_VIA_REGISTERS + $06   ; T1LL
SYSTEM_VIA_T1LH      := SYSTEM_VIA_REGISTERS + $07   ; T1LH
SYSTEM_VIA_T2CL      := SYSTEM_VIA_REGISTERS + $08   ; T2CL
SYSTEM_VIA_T2CH      := SYSTEM_VIA_REGISTERS + $09   ; T2CH
SYSTEM_VIA_SR        := SYSTEM_VIA_REGISTERS + $0A   ; SR
SYSTEM_VIA_ACR       := SYSTEM_VIA_REGISTERS + $0B   ; ACR
SYSTEM_VIA_PCR       := SYSTEM_VIA_REGISTERS + $0C   ; PCR
SYSTEM_VIA_IFR       := SYSTEM_VIA_REGISTERS + $0D   ; IFR
SYSTEM_VIA_IER       := SYSTEM_VIA_REGISTERS + $0E   ; IER
.ENDIF

; Video card
DEFINE_REGISTERS VPU_REGISTERS, CFG_DEVICE_VPU

.IF .DEF(VPU_REGISTERS)
VPU_VSR     := VPU_REGISTERS + $00   ; VSR
VPU_BSR     := VPU_REGISTERS + $01   ; BSR
VPU_HSUCR   := VPU_REGISTERS + $02   ; HSCUR
VPU_HSUVR   := VPU_REGISTERS + $03   ; HSCVR
.ENDIF

; ACIA UART
DEFINE_REGISTERS ACIA_REGISTERS, CFG_DEVICE_ACIA

.IF .DEF(ACIA_REGISTERS)
ACIA_DATA    := ACIA_REGISTERS + $00  ; DATA
ACIA_STATUS  := ACIA_REGISTERS + $01  ; STATUS
ACIA_CMD     := ACIA_REGISTERS + $02  ; CMD
ACIA_CTRL    := ACIA_REGISTERS + $03  ; CTRL
.ENDIF

.ENDIF