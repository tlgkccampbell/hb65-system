MEMORY {
       ZP: start = $0000, size = $0080, type = rw, define = yes;
REGISTERS: start = $0080, size = $0080, type = rw, define = yes;
    STACK: start = $0100, size = $0100, type = rw, define = yes;
    WRAML: start = $0000, size = $1F00, type = rw, define = yes;
    WRAMH: start = $4000, size = $4000, type = rw, define = yes;
    XRAM0: start = $2000, size = $2000, type = rw, define = yes, bank = 0;
    XRAM1: start = $2000, size = $2000, type = rw, define = yes, bank = 1;
    XRAM2: start = $2000, size = $2000, type = rw, define = yes, bank = 2;
    XRAM3: start = $2000, size = $2000, type = rw, define = yes, bank = 3;
    XRAM4: start = $2000, size = $2000, type = rw, define = yes, bank = 4;
    XRAM5: start = $2000, size = $2000, type = rw, define = yes, bank = 5;
    XRAM6: start = $2000, size = $2000, type = rw, define = yes, bank = 6;
    XRAM7: start = $2000, size = $2000, type = rw, define = yes, bank = 7;
    XRAM8: start = $2000, size = $2000, type = rw, define = yes, bank = 8;
    XRAM9: start = $2000, size = $2000, type = rw, define = yes, bank = 9;
    XRAMA: start = $2000, size = $2000, type = rw, define = yes, bank = 10;
    XRAMB: start = $2000, size = $2000, type = rw, define = yes, bank = 11;
    XRAMC: start = $2000, size = $2000, type = rw, define = yes, bank = 12;
    XRAMD: start = $2000, size = $2000, type = rw, define = yes, bank = 13;
    XRAME: start = $2000, size = $2000, type = rw, define = yes, bank = 14;
    XRAMF: start = $2000, size = $2000, type = rw, define = yes, bank = 15;
      ROM: start = $8000, size = $8000, type = ro, define = yes, fill = yes, file = %O;
}

SEGMENTS {
    ZEROPAGE: load =    ZP, type = zp, define = yes;
    DATA:     load = WRAML, type = rw;
    CODE:     load =   ROM, type = ro;
    RODATA:   load =   ROM, type = ro;
    WOZMON:   load =   ROM, type = ro, offset = $7E00;
    VECTORS:  load =   ROM, type = ro, offset = $7FFA;
}